//+------------------------------------------------------------------+
//|                                           MetaTrader Manager API |
//|                 Copyright © 2001-2006, MetaQuotes Software Corp. |
//|                                         http://www.metaquotes.ru |
//+------------------------------------------------------------------+
//|                   DO NOT EDIT THIS FILE!!!                       |
//+------------------------------------------------------------------+
unit ManagerAPI;
interface

uses
  SysUtils, Classes, windows, winsock;

type
  TStr04  = array [0..03]  of char;
  TStr07  = array [0..06]  of char;
  TStr08  = array [0..07]  of char;
  TStr12  = array [0..11]  of char;
  TStr16  = array [0..15]  of char;
  TStr20  = array [0..19]  of char;
  TStr32  = array [0..31]  of char;
  TStr36  = array [0..35]  of char;
  TStr48  = array [0..47]  of char;
  TStr52  = array [0..51]  of char;
  TStr64  = array [0..63]  of char;
  TStr72  = array [0..71]  of char;

  TStr128 = array [0..127] of char;
  TStr208 = array [0..207] of char;
  TStr256 = array [0..255] of char;
  TStr512 = array [0..511] of char;

  TStr1024 = array [0..1023] of char;

type
  PIntArray = ^TIntArray;
  TIntArray = array of integer;

type
  ptime_t  = ^time_t;
  pPChar   = ^PChar;

  time_t   = dword;
  time_c   = time_t;
  COLORREF = dword;

//+------------------------------------------------------------------+
//|                   Server Configurations                          |
//+------------------------------------------------------------------+
//| Configuration types                                              |
//+------------------------------------------------------------------+
const
   CONFIG_ALL         =   0;            // all configurations
   CONFIG_COMMON      =   1;            // common configuration
   CONFIG_ACCESS      =   2;            // IP access list configuration
   CONFIG_SERVERS     =   3;            // data servers
   CONFIG_TIME        =   4;            // working time configuration
   CONFIG_HOLIDAYS    =   5;            // holidays configuration
   CONFIG_SYMBOLS     =   6;            // symbols configuration
   CONFIG_SYMB_GROUPS =   7;            // securities configuration
   CONFIG_GROUPS      =   8;            // groups configuration
   CONFIG_MANAGERS    =   9;            // manager's rights configuration
   CONFIG_DATAFEEDS   =  10;            // data feeds configuration
   CONFIG_BACKUP      =  11;            // backups configuration
   CONFIG_LIVEUPDATE  =  12;            // LiveUpdate configuration
   CONFIG_SYNC        =  13;            // synchronization configuration
   CONFIG_PLUGINS     =  14;            // plugins configuration
   CONFIG_END         = 255;            // last (unused)

//+------------------------------------------------------------------+
//| Database header                                                  |
//+------------------------------------------------------------------+
type
  TDataBaseHeader = record
    version:    integer;                  // version
    copyright:  TStr64;                   // copyright string
    name:       TStr16;                   // database name
    prices:     array[0..1] of double;    // last bid/ask
    symbol:     TStr12;                   // symbol
    period:     integer;                  // period
    timesign:   time_c;                   // timesign
    digits:     integer;                  // floating-point digits for instruments
    reserved:   TStr07;                   // reserved
  end;

//+------------------------------------------------------------------+
//| Configuration structures                                         |
//+------------------------------------------------------------------+
//| Common configuration                                             |
//+------------------------------------------------------------------+
PConCommon = ^TConCommon;
TConCommon = record
   owner                 : TStr128;                // servers owner (include version & build)
   name                  : TStr32;                 // server name
   address               : uint;                   // IP address assigned to the server
   port                  : integer;                // port
   timeout               : dword;                  // sockets timeout
   enable_demo           : integer;                // enable demo-account allocation
   timeofdemo            : integer;                // demo-account living time (days since last connect)
   daylightcorrection    : integer;                // allow daylight correction
   internal              : TStr64;                 // reserved
   timezone              : integer;                // time zone 0-GMT;-1=GMT-1;1=GMT+1;
   timesync              : TStr64;                 // time synchronization server address
   //----
   minclient             : integer;                // minimal authorized client version
   minapi                : integer;                // minimal authorized client version
   feeder_timeout        : dword;                  // data feed switch timeout
   keepemails            : integer;                // internal mail keep period
   endhour,endminute     : integer;                // end of day time-hour & minute
   //----
   optimization_time     : integer;                // optimization start time (minutes)
   optimization_lasttime : integer;                // optimization last time
   optimization_counter  : integer;                // internal variable
   optimization_unused   : array [0..7] of integer;// reserved for future use
   //----
   antiflood             : integer;                // enable antiflood control
   floodcontrol          : integer;                // max. antiflood connections
   //----
   liveupdate_mode       : integer;                // LiveUpdate mode (LIVE_UPDATE_NO, LIVE_UPDATE_ALL, LIVE_UPDATE_NO_SERVER)
   //----
   lastorder             : integer;                // last order's ticket     (read only)
   lastlogin             : integer;                // last account's number   (read only)
   lostlogin             : integer;                // lost commission's login (read only)
   //----
   rollovers_mode        : integer;                // rollover mode (ROLLOVER_NORMAL,ROLLOVER_REOPEN_BY_CLOSE_PRICE,ROLLOVER_REOPEN_BY_BID)
   //----
   path_database         : TStr256;                // path to databases
   path_history          : TStr256;                // path to history bases
   path_log              : TStr256;                // path to log
   //---- overnigths
   overnight_last_day    : time_t;                 // day of last overnight
   overnight_last_time   : time_t;                 // time of last overnight
   overnight_prev_time   : time_t;                 // time of время next to last overnight
   //---- month reports
   overmonth_last_month  : time_t;                 // month of last report
   //---- performance base
   adapters              : TStr256;                // network adapters list (read-only)
   bind_adresses         : array [0..7] of uint;   // array of avaible IP addresses
   server_version        : smallint;               // server version
   server_build          : smallint;               // server build
   web_adresses          : array [0..7] of uint;   // web services access list (comma separated IP addresses)
   //----
   reserved              : array [0..55]  of integer;
end;

//---- rollover mode
const
    ROLLOVER_NORMAL                = 0;
    ROLLOVER_REOPEN_BY_CLOSE_PRICE = 1;
    ROLLOVER_REOPEN_BY_BID         = 2;

//---- LiveUpdate mode
const
    LIVE_UPDATE_NO        = 0;
    LIVE_UPDATE_ALL       = 1;
    LIVE_UPDATE_NO_SERVER = 2;

//+------------------------------------------------------------------+
//| Access configuration                                             |
//+------------------------------------------------------------------+
type
  PConAccess = ^TConAccess;
  TConAccess = record
    action                : integer;  // type of action (FW_BLOCK,FW_PERMIT)
    from, fromto          : ulong;    // from, to addresses
    comment               : TStr64;   // comment
    reserved              : array [0..16] of integer;
  end;
  
  PAConAccess = ^TAConAccess;
  TAConAccess = array [0..0] of TConAccess;

//---- access action
const
  FW_BLOCK  = 0;
  FW_PERMIT = 1;

//+------------------------------------------------------------------+
//| Data Servers configuration                                       |
//+------------------------------------------------------------------+
type
  PConDataServer = ^TConDataServer;
  TConDataServer = record
    server                : TStr64;  // server address (server:ip)
    ip                    : ulong;   // server IP
    description           : TStr64;  // server description
    isproxy               : integer;                // can server be proxy?
    priority              : integer;                // priority: 0-7 base, 255-idle
    loading               : uint;                   // server loading (UINT_MAX-server does not inform its loading)
    reserved              : array [0..2] of integer;// reserved
    next                  : PConDataServer;         // internal (not used)
  end;

  PAConDataServer = ^TAConDataServer;
  TAConDataServer = array [0..0] of TConDataServer;

//+------------------------------------------------------------------+
//| Time configuration                                               |
//+------------------------------------------------------------------+
  PConTime = ^TConTime;
  TConTime = record
    days        : array [0..6,0..23] of integer; // server's accessebility (7 days-24 hours, 0-denied, 1-allowed)
    dayscontrol : integer;                       // internal variable
    reserved    : array [0..2] of integer;       // reserved
  end;

//+------------------------------------------------------------------+
//| Backup configuration                                             |
//+------------------------------------------------------------------+
  PConBackup = ^TConBackup;
  TConBackup = record
   //----
    fullbackup_path       : TStr256;  // path to backup
    fullbackup_period     : integer;  // full backup's period-BACKUP_1HOUR, BACKUP_4HOURS, BACKUP_1DAY
    fullbackup_store      : integer;  // full backup's store time-BU_STORE_1MONTH, BU_STORE_3MONTHS, BU_STORE_6MONTHS,BU_STORE_1YEAR
    fullbackup_lasttime   : time_t;   // full backup's last execution time
    fullbackup_shift      : smallint; // full backup timeshift (minutes)
    //----
    external_path         : TStr256;  // path to external processing directory
    //----
    archive_period        : integer;  // period of archive backup-ARC_BACKUP_5MIN, ARC_BACKUP_15MIN, ARC_BACKUP_30MIN, ARC_BACKUP_1HOUR
    archive_store         : integer;  // archive backup's store time-ARC_STORE_1WEEK, ARC_STORE_2WEEKS, ARC_STORE_1MONTH, ARC_STORE_3MONTH, ARC_STORE_6MONTH
    archive_lasttime      : time_t;   // archive backup's last execution time
    //----
    export_securities     : TStr512;  // comma separated list of exported securities
    export_path           : TStr256;  // path to export script
    export_period         : integer;  // export period-enumeration EXPORT_1MIN, EXPORT_5MIN, EXPORT_15MIN, EXPORT_30MIN,EXPORT_1HOUR
    export_lasttime       : time_t;   // export's last execution time
    //---- watch dog
    watch_role            : integer;                // server role { WATCH_STAND_ALONE, WATCH_MASTER, WATCH_SLAVE }
    watch_password        : array[0..15] of char;   // slave server password
    watch_opposite        : array[0..23] of char;   // opposite server IP address and port
    watch_timeout         : integer;                // slave server switch timeout
    //----
    reserved              : array[0..2] of integer; // reserved
  end;

const
//---- server role: standalone, master, slave server
   WATCH_STAND_ALONE = 0;
   WATCH_MASTER      = 1;
   WATCH_SLAVE       = 2;
//---- full backup execution periods: 1 hour, 4 hours, 1 day
   BACKUP_1HOUR      = 0;
   BACKUP_4HOURS     = 1;
   BACKUP_1DAY       = 2;
//---- full backup store period: 1 month, 3 months, 6 months, 1 year
   BU_STORE_1MONTH   = 0;
   BU_STORE_3MONTHS  = 1;
   BU_STORE_6MONTHS  = 2;
   BU_STORE_1YEAR    = 3;
//---- arc. backup execution periods: 5 min, 15 min, 30 min, 1 hour
   ARC_BACKUP_5MIN   = 0;
   ARC_BACKUP_15MIN  = 1;
   ARC_BACKUP_30MIN  = 2;
   ARC_BACKUP_1HOUR  = 3;
//---- arc. backup store period: 1 month,3 months, 6 months,1 year
   ARC_STORE_1WEEK   = 0;
   ARC_STORE_2WEEKS  = 1;
   ARC_STORE_1MONTH  = 2;
   ARC_STORE_3MONTH  = 3;
   ARC_STORE_6MONTH  = 4;
//---- export execution period: 1 min, 5 min, 15 min, 30 min, 1 hour
   EXPORT_1MIN       = 0;
   EXPORT_5MIN       = 1;
   EXPORT_15MIN      = 2;
   EXPORT_30MIN      = 3;
   EXPORT_1HOUR      = 4;

type
//+------------------------------------------------------------------+
//| Datafeed configuration                                           |
//+------------------------------------------------------------------+
  PConFeeder = ^TConFeeder;
  TConFeeder = record
    name                  : TStr64;  // name
    filename              : TStr256; // datafeed filename
    server                : TStr64;  // server address
    login                 : TStr32;  // datafeed login
    pass                  : TStr32;  // datafeed password
    keywords              : TStr256; // keywords (news filtration)
    enable                : integer; // enable feeder
    mode                  : integer; // datafeed mode-enumeration FEED_QUOTES, FEED_NEWS, FEED_QUOTESNEWS
    timeout               : integer; // max. freeze time (default ~120 sec.)
    timeout_reconnect     : integer; // reconnect timeout before attemps_sleep connect attempts (default ~ 5  sec)
    timeout_sleep         : integer; // reconnect timeout after attemps_sleep connect attempts  (default ~ 60 sec)
    attemps_sleep         : integer; // reconnect count (see timeout_reconnect & timeout_sleep)
    unused                : array [0..33] of integer;
  end;

  PAConFeeder = ^TAConFeeder;
  TAConFeeder = array [0..0] of TConFeeder;

const
//---- datafeed modes-receive quotes, receive news, receive quotes and news
   FEED_QUOTES           = 0;
   FEED_NEWS             = 1;
   FEED_QUOTESNEWS       = 2;
//+------------------------------------------------------------------+
//| Security group configuration for client group                    |
//+------------------------------------------------------------------+
   MAX_SEC_GROUPS        =  32;
   MAX_SEC_GROPS_MARGIN  = 128;
//----

type
  PConGroupSec = ^TConGroupSec;
  TConGroupSec = record
    show,trade            : integer;   // enable show and trade for this group of securites
    execution             : integer;   // dealing mode-EXECUTION_MANUAL,EXECUTION_AUTO,EXECUTION_ACTIVITY
    //---- comission settings
    comm_base             : double;    // standart commission
    comm_type             : integer;   // commission type-COMM_TYPE_MONEY,COMM_TYPE_PIPS,COMM_TYPE_PERCENT
    comm_lots             : integer;   // commission lots mode-COMMISSION_PER_LOT,COMMISSION_PER_DEAL
    comm_agent            : double;    // agent commission
    comm_agent_type       : integer;   // agent commission mode-COMM_TYPE_MONEY, COMM_TYPE_PIPS
    //----
    spread_diff           : integer;   // spread difference in compare with default security spread
    //----
    lot_min,lot_max       : integer;   // allowed minimal and maximal lot values
    lot_step              : integer;   // allowed step value (10 lot-1000, 1 lot-100, 0.1 lot-10)
    ie_deviation          : integer;   // maximum price deviation in Instant Execution mode
    confirmation          : integer;   // use confirmation in Request mode
    trade_rights          : integer;   // clients trade rights-bit mask see TRADE_DENY_NONE,TRADE_DENY_CLOSEBY,TRADE_DENY_MUCLOSEBY
    ie_quick_mode         : integer;   // do not resend request to the dealer when client uses deviation
    autocloseout_mode     : integer;   // auto close-out method { CLOSE_OUT_NONE, CLOSE_OUT_HIHI, CLOSE_OUT_LOLO, CLOSE_OUT_HILO, CLOSE_OUT_LOHI, CLOSE_OUT_LOHI, CLOSE_OUT_FIFO, CLOSE_OUT_LIFO, CLOSE_OUT_INTRDAY_FIFO }
    comm_tax              : double;    // commission taxes
    comm_agent_lots       : integer;   // agent commission per lot/per deal { COMMISSION_PER_LOT,COMMISSION_PER_DEAL }
    reserved              : array [0..3] of integer;
  end;
  
//+------------------------------------------------------------------+
//| Special securities configurations for client group               |
//+------------------------------------------------------------------+
  PConGroupMargin = ^TConGroupMargin;
  TConGroupMargin = record
    symbol                : TStr12; // security
    swap_long,
    swap_short            : double; // tickvalue for bid & ask
    margin_divider        : double; // margin divider
    reserved              : array[0..6] of integer;
  end;

const
//---- dealing mode
   EXECUTION_MANUAL      = 0;
   EXECUTION_AUTO        = 1;
   EXECUTION_ACTIVITY    = 2;
//---- commission type
   COMM_TYPE_MONEY       = 0;
   COMM_TYPE_PIPS        = 1;
   COMM_TYPE_PERCENT     = 2;
//---- comission lots mode
   COMMISSION_PER_LOT    = 0;
   COMMISSION_PER_DEAL   = 1;
//---- clients trade rights
   TRADE_DENY_NONE       = 0;
   TRADE_DENY_CLOSEBY    = 1;
   TRADE_DENY_MUCLOSEBY  = 2;
//---- auto close-out method
   CLOSE_OUT_NONE        = 0;
   CLOSE_OUT_HIHI        = 1;
   CLOSE_OUT_LOLO        = 2;
   CLOSE_OUT_HILO        = 3;
   CLOSE_OUT_LOHI        = 4;
   CLOSE_OUT_FIFO        = 5;
   CLOSE_OUT_LIFO        = 6;
   CLOSE_OUT_INTRDAY_FIFO= 7;

//+------------------------------------------------------------------+
//| Client group configuration                                       |
//+------------------------------------------------------------------+
type
  PConGroup = ^TConGroup;
  TConGroup = record
    //---- common settings
    group                 : TStr16;  // group name
    enable                : integer; // enable group
    timeout               : integer; // trade confirmation timeout (seconds)
    adv_security          : integer; // enable advanced security
    //---- statements
    company               : TStr128; // company name
    signature             : TStr256; // statements signature
    smtp_server           : TStr64;  // statements SMTP server
    smtp_login            : TStr32;  // statements SMTP login
    smtp_password         : TStr32;  // statements SMTP password
    support_email         : TStr64;  // support email
    templates             : TStr32;  // path to directory with custom templates
    copies                : integer; // copy statements on support email
    reports               : integer; // enable statements
    //---- default settings
    default_leverage      : integer; // default leverage (user don't specify leverage himself)
    default_deposit       : double;  // default deposit  (user don't specify balance  himself)
    //---- securities
    maxsecurities         : integer; // maximum simultaneous securities
    secgroups             : array [0..MAX_SEC_GROUPS-1] of TConGroupSec;          // security group settings
    secmargins            : array [0..MAX_SEC_GROPS_MARGIN-1] of TConGroupMargin; // special securities settings
    secmargins_total      : integer; // count of special securities settings
    //---- margin & interest
    currency              : TStr12;  // deposit currency
    credit                : double;  // virtual credit
    margin_call           : integer; // margin call level (percents)
    margin_mode           : integer; // margin mode-MARGIN_DONT_USE,MARGIN_USE_ALL,MARGIN_USE_PROFIT,MARGIN_USE_LOSS
    margin_stopout        : integer; // stop out level
    interestrate          : double;  // annual interest rate (percents)
    use_swap              : integer; // use rollovers & interestrate
    //---- rights
    news                  : integer; // news mode
    rights                : integer; // rights bit mask (ALLOW_FLAG_EMAIL,
    unused_rights         : array [0..7] of integer;// internal data
    securities_hash       : TStr16;  // internal data
    margin_type           : integer; // margin controlling type
    reserved              : array [0..29] of integer;
  end;

  PAConGroup = ^TAConGroup;
  TAConGroup = array [0..0] of TConGroup;

const
//---- margin calculation mode
   MARGIN_MODE_DONT_USE   = 0;
   MARGIN_MODE_USE_ALL    = 1;
   MARGIN_MODE_USE_PROFIT = 2;
   MARGIN_MODE_USE_LOSS   = 3;
//---- margin controlling type
   MARGIN_TYPE_PERCENT    = 0;
   MARGIN_TYPE_CURRENCY   = 1;
//---- news mode-no news, only topics, full news (topic+body)
   NEWS_NO                = 0;
   NEWS_TOPICS            = 1;
   NEWS_FULL              = 2;
//---- group rights
   ALLOW_FLAG_EMAIL       = 1;
   ALLOW_FLAG_TRAILING    = 2;
   ALLOW_FLAG_ADVISOR     = 4;
   ALLOW_FLAG_EXPIRATION  = 8;

//+------------------------------------------------------------------+
//| Hollidays configuration                                          |
//+------------------------------------------------------------------+
type
  PConHoliday = ^TConHoliday;
  TConHoliday = record
    year                  : integer; // year
    month                 : integer; // month
    day                   : integer; // day
    from,
    fromto                : integer; // work time-from & to (minutes)
    symbol                : TStr32;  // security name or symbol's group name or "All"
    description           : TStr128; // description
    enable                : integer;                  // enable
    reserved              : array [0..12] of integer; // reserved
    next                  : PConHoliday;              // internal data
  end;

  PAConHoliday = ^TAConHoliday;
  TAConHoliday = array [0..0] of TConHoliday;
//+------------------------------------------------------------------+
//| LiveUpdate configuration                                         |
//+------------------------------------------------------------------+

const
   LIVE_FILES_MAX = 128;
//----
type
  PLiveInfoFile = ^TLiveInfoFile;
  TLiveInfoFile = record
    filename              : TStr256; // file name
    size                  : integer; // file size
    hash                  : TStr36;  // file hash
    reserved              : array [0..9] of integer;  // reserved
  end;
//----
  PConLiveUpdate = ^TConLiveUpdate;
  TConLiveUpdate = record
    company               : TStr128;   // company
    path                  : TStr256;   // path to LiveUpdate
    version               : integer;   // version
    build                 : integer;   // build
    maxconnect            : integer;   // max. simultaneous connections
    connections           : integer;   // current connections (read only)
    ltype                 : integer;   // type LIVE_UPDATE_CLIENT, LIVE_UPDATE_MANAGER, LIVE_UPDATE_ADMIN
    enable                : integer;   // enable
    totalfiles            : integer;   // total files count
    files                 : array [0..LIVE_FILES_MAX-1] of TLiveInfoFile; // files' configurations
    reserved              : array [0..15] of integer; // reserved
    next                  : PConLiveUpdate;           // internal data
  end;

  PAConLiveUpdate = ^TAConLiveUpdate;
  TAConLiveUpdate = array [0..0] of TConLiveUpdate;

const
//---- LiveUpdate type
   LIVE_UPDATE_CLIENT     = 0;
   LIVE_UPDATE_MANAGER    = 1;
   LIVE_UPDATE_ADMIN      = 2;
   LIVE_UPDATE_DATACENTER = 3;
   LIVE_UPDATE_PPC_ARM    = 4;
   LIVE_UPDATE_PPC_MIPS   = 5;
   LIVE_UPDATE_PPC_SH3    = 6;
   LIVE_UPDATE_LAST       = 7;

//+------------------------------------------------------------------+
//| Manager rights for security groups                               |
//+------------------------------------------------------------------+
type
  PConManagerSec = ^TConManagerSec;
  TConManagerSec = record
    internal              : integer;                  // internal data
    enable                : integer;                  // enable
    minimum_lots          : integer;                  // min. lots
    maximum_lots          : integer;                  // max. lots
    unused                : array [0..15] of integer; // reserved
  end;

//+------------------------------------------------------------------+
//| Manager configuration                                            |
//+------------------------------------------------------------------+
type
  PConManager = ^TConManager;
  TConManager = record
    login                 : integer;   // login
    //---- rights
    manager               : integer;   // right to add & change client records
    money                 : integer;   // right to balance & credit management
    online                : integer;   // right to see online users
    riskman               : integer;   // right to use analyzer
    broker                : integer;   // right to deal
    admin                 : integer;   // right to server administration
    logs                  : integer;   // right to see logs
    reports               : integer;   // right to see reports
    trades                : integer;   // right to add/modify/delete trades
    market_watch          : integer;   // right to change spread, spread balance, stop levels, execution mode and send quotes
    email                 : integer;   // right to send internal mail
    user_details          : integer;   // right to see clients private data-name,country,address,phone,email etc.
    see_trades            : integer;   // right to see trades
    news                  : integer;   // right to send news
    plugins               : integer;   // right to configure plugins
    unused                : array [0..12] of integer; // unused rights
    //---- IP filtration
    ipfilter              : integer;   // enable IP control
    ip_from,ip_to         : ulong;     // range of allowed IPs
    //----
    mailbox               : TStr64;    // name of mailbox for internal mail
    groups                : TStr1024;  // comma separated list of managed groups (allowed '*' wildcard)
    secgroups             : array [0..MAX_SEC_GROUPS -1] of TConManagerSec; // manager rights for security groups
    exp_time              : dword;     // internal data
    name                  : TStr32;    // manager name (read only)
    //----
    reserved              : array [0..22] of integer;
end;

  PAConManager = ^TAConManager;
  TAConManager = array [0..0] of TConManager;
  
//+------------------------------------------------------------------+
//| Security configurations                                          |
//+------------------------------------------------------------------+
//| Security sessions configurations                                 |
//+------------------------------------------------------------------+
type
  TConSession = record
    open_hour, open_min    : smallint;                 // session open  time: hour & minute
    close_hour, close_min  : smallint;                 // session close time: hour & minute
    open, close            : integer;                  // internal data
    align                  : array [0..6] of smallint; // internal data
  end;
//----
  TConSessions = record
    //----
    quote                 : array [0..2] of TConSession; // quote sessions
    trade                 : array [0..2] of TConSession; // trade sessions
    //----
    quote_overnight       : integer;                    // internal data
    trade_overnight       : integer;                    // internal data
    reserved              : array [0..1] of integer;    // reserved
  end;

//+------------------------------------------------------------------+
//| Security configuration                                           |
//+------------------------------------------------------------------+
const
   MAX_SYMBOLS = 1024;

type
  PConSymbol = ^TConSymbol;
  TConSymbol = record
    //---- common settings
    symbol                : TStr12;   // name
    description           : TStr64;   // description
    source                : TStr12;   // synonym
    currency              : TStr12;   // currency
    gtype                 : integer;  // security group (see ConSymbolGroup)
    digits                : integer;  // security precision
    trade                 : integer;  // trade mode
    //---- external settings
    background_color      : COLORREF; // background color
    count                 : integer;  // symbols index
    count_original        : integer;  // symbols index in market watch
    external_unused       : array [0..6] of integer;
    //---- sessions
    realtime              : integer;  // allow real time quotes
    starting              : time_t;   // trades starting date (UNIX time)
    expiration            : time_t;   // trades end date      (UNIX time)
    sessions              : array [0..6] of TConSessions; // quote & trade sessions
    //---- profits
    profit_mode           : integer;  // profit calculation mode
    profit_reserved       : integer;  // reserved
    //---- filtration
    filter                : integer;  //  (если меньше 1, фильтр выключен)
    filter_counter        : integer;  // filtration parameter
    filter_limit          : double;   // max. permissible deviation from last quote (percents)
    filter_reserved       : double;   // reserved
    logging               : integer;  // enable to log quotes
    //---- spread & swaps
    spread                : integer;  // spread
    spread_balance        : integer;  // spread balance
    exemode               : integer;  // execution mode
    swap_enable           : integer;  // enable swaps
    swap_type             : integer;  // swap type
    swap_long,swap_short  : double;   // swaps values for long & short postions
    swap_rollover3days    : integer;  // triple rollover day-0-Monday,1-Tuesday...4-Friday
    contract_size         : double;   // contract size
    tick_value            : double;   // one tick value
    tick_size             : double;   // one tick size
    stops_level           : integer;  // stops deviation value
    //----            овернайты и прочие свопы
    gtc_pendings          : integer;  // GTC mode (ORDERS_DAILY, ORDERS_GTC, ORDERS_DAILY_NO_STOPS)
    //---- margin calculation
    margin_mode           : integer;  // margin calculation mode
    margin_initial        : double;   // initial margin
    margin_maintenance    : double;   // margin maintenance
    margin_hedged         : double;   // hadget margin
    margin_divider        : double;   // margin divider
    //---- calclulated variables (internal data)
    point                 : double;   // point size-(1/(10^digits)
    multiply              : double;   // multiply 10^digits
    bid_tickvalue         : double;   // tickvalue for bid
    ask_tickvalue         : double;   // tickvalue for ask
    //----
    long_only             : integer;  // allow only BUY positions
    instant_max_volume    : integer;  // max. volume for Instant Execution
    //----
    margin_currency       : TStr12;   // currency of margin requirments
    freeze_level          : integer;  // order modification freeze level
    unused                : array [0..25] of integer;
  end;

  PAConSymbol = ^TAConSymbol;
  TAConSymbol = array [0..0] of TConSymbol;

//+------------------------------------------------------------------+
//| Symbols enumeration                                              |
//+------------------------------------------------------------------+
const
//---- symbol execution mode
   EXE_REQUEST          = 0;
   EXE_INSTANT          = 1;
   EXE_MARKET           = 2;
//---- trade mode
   TRADE_NO             = 0;
   TRADE_CLOSE          = 1;
   TRADE_FULL           = 2;
//---- swap type
   SWAP_BY_POINTS       = 0;
   SWAP_BY_DOLLARS      = 1;
   SWAP_BY_INTEREST     = 2;
//---- profit calculation mode
   PROFIT_CALC_FOREX    = 0;
   PROFIT_CALC_CFD      = 1;
   PROFIT_CALC_FUTURES  = 2;
//---- margin calculation mode
   MARGIN_CALC_FOREX    = 0;
   MARGIN_CALC_CFD      = 1;
   MARGIN_CALC_FUTURES  = 2;
   MARGIN_CALC_CFDINDEX = 3;
//---- GTC mode
   ORDERS_DAILY         = 0;
   ORDERS_GTC           = 1;
   ORDERS_DAILY_NO_STOPS= 2;
   
//+------------------------------------------------------------------+
//| Symbol groups                                                    |
//+------------------------------------------------------------------+
   MAX_SEC_GROUP = 32;
   
type
  PConSymbolGroup = ^TConSymbolGroup;
  TConSymbolGroup = record
    name                  : TStr16; // group name
    description           : TStr64; // group description
  end;

  PAConSymbolGroup = ^TAConSymbolGroup;
  TAConSymbolGroup = array [0..MAX_SEC_GROUP-1] of TConSymbolGroup;

//+------------------------------------------------------------------+
//| Synchronization configuration                                    |
//+------------------------------------------------------------------+
type
  PConSync = ^TConSync;
  TConSync = record
    server                : TStr64;    // name (address
    unusedport            : integer;   // port
    login                 : TStr32;    // for future use-login
    password              : TStr32;    // for future use=password
    enable                : integer;   // enable sychronization
    mode                  : integer;   // synchronization mode: HB_ADD,HB_UPDATE,HB_INSERT
    from,fromto           : time_t;    // synchronization range (<0-whole chart)
    securities            : TStr1024;  // symbols list
    reserved              : array [0..13] of integer; // reserverd
    next                  : PConSync;  // internal (do not use)
  end;

  PAConSync = ^TAConSync;
  TAConSync = array [0..0] of TConSync;
  
//---- synchronization mode
const
   HB_ADD    = 0;
   HB_UPDATE = 1;
   HB_INSERT = 2;
   HB_DELETE = 3;
   HB_LAST   = 4;

//+------------------------------------------------------------------+
//| Plugin configuration                                             |
//+------------------------------------------------------------------+
//| Plugin description                                               |
//+------------------------------------------------------------------+
type
  TPluginInfo = record
    name                  : TStr128;   // plugin name
    version               : uint;                     // plugin version
    copyright             : TStr128;   // plugin copyright
    reserved              : array [0..31] of integer; // reserved
  end;

//+------------------------------------------------------------------+
//| Plugin configuration parameter                                   |
//+------------------------------------------------------------------+
type
  PPluginCfg = ^TPluginCfg;
  TPluginCfg = record
    name     : TStr32;    // parameter name
    value    : TStr128;   // parameter value
    reserved : array [0..15] of integer; // reserved
  end;

  PAPluginCfg = ^TAPluginCfg;
  TAPluginCfg = array [0..0] of TPluginCfg;

//+------------------------------------------------------------------+
//| Plugin configuration                                             |
//+------------------------------------------------------------------+
type
  PConPlugin = ^TConPlugin;
  TConPlugin = record
    filename              : TStr256;     // plugin file name
    info                  : TPluginInfo; // plugin description
    enabled               : integer;     // plugin enabled/disabled
    configurable          : integer;     // is plugin configurable
    manager_access        : integer;     // plugin can be accessed from manager terminal
    reserved              : array [0..61] of integer; // reserved
  end;

  PAConPlugin = ^TAConPlugin;
  TAConPlugin = array [0..0] of TConPlugin;

//---- plugin with parameters
type
  PConPluginParam = ^TConPluginParam;
  TConPluginParam = record
    plugin : TConPlugin;  // plugin configuration
    params : PAPluginCfg; // plugin parameters
    total  : integer;     // total plugin parameters
  end;

  PAConPluginParam = ^TAConPluginParam;
  TAConPluginParam = array [0..0] of TConPluginParam;

//+------------------------------------------------------------------+
//|                           Result codes                           |
//+------------------------------------------------------------------+
const
   //---- common errors
   RET_OK                 = 0;        // all OK
   RET_OK_NONE            = 1;        // all OK-no operation
   RET_ERROR              = 2;        // general error
   RET_INVALID_DATA       = 3;        // invalid data
   RET_TECH_PROBLEM       = 4;        // server technical problem
   RET_OLD_VERSION        = 5;        // old client terminal
   RET_NO_CONNECT         = 6;        // no connection
   RET_NOT_ENOUGH_RIGHTS  = 7;        // no enough rights
   RET_TOO_FREQUENT       = 8;        // too frequently access to server
   RET_MALFUNCTION        = 9;        // mulfunctional operation
   RET_GENERATE_KEY       = 10;       // need to send public key
   RET_SECURITY_SESSION   = 11;       // security session start
   //---- account status
   RET_ACCOUNT_DISABLED   = 64;       // account blocked
   RET_BAD_ACCOUNT_INFO   = 65;       // bad account info
   RET_PUBLIC_KEY_MISSING = 63;       // отсутствует ключ
   //---- trade
   RET_TRADE_TIMEOUT      = 128;      // trade transatcion timeou expired
   RET_TRADE_BAD_PRICES   = 129;      // order has wrong prices
   RET_TRADE_BAD_STOPS    = 130;      // wrong stops level
   RET_TRADE_BAD_VOLUME   = 131;      // wrong lot size
   RET_TRADE_MARKET_CLOSED= 132;      // market closed
   RET_TRADE_DISABLE      = 133;      // trade disabled
   RET_TRADE_NO_MONEY     = 134;      // no enough money for order execution
   RET_TRADE_PRICE_CHANGED= 135;      // price changed
   RET_TRADE_OFFQUOTES    = 136;      // no quotes
   RET_TRADE_BROKER_BUSY  = 137;      // broker is busy
   RET_TRADE_REQUOTE      = 138;      // requote
   RET_TRADE_ORDER_LOCKED = 139;      // order is proceed by dealer and cannot be changed
   RET_TRADE_LONG_ONLY    = 140;      // allowed only BUY orders
   RET_TRADE_TOO_MANY_REQ = 141;      // too many requests from one client
   //---- order status notification
   RET_TRADE_ACCEPTED     = 142;     // trade request accepted by server and placed in request queue
   RET_TRADE_PROCESS      = 143;     // trade request accepted by dealerd
   RET_TRADE_USER_CANCEL  = 144;     // trade request canceled by client
//+------------------------------------------------------------------+
//| Pumping mode flags                                               |
//+------------------------------------------------------------------+
   //---- user flags
   CLIENT_FLAGS_HIDETICKS   = 1;     // do not send ticks
   CLIENT_FLAGS_HIDENEWS    = 2;     // do not send news
   CLIENT_FLAGS_HIDEMAIL    = 4;     // do not send mails
   CLIENT_FLAGS_SENDFULLNEWS= 8;     // send news body with news header in pumping mode
   CLIENT_FLAGS_RESERVED    = 16;    // reserved
   //---- manager flags
   CLIENT_FLAGS_HIDEUSERS   = 32;    // do not send online users

//+------------------------------------------------------------------+
//|  Server datafeed descritopn                                      |
//+------------------------------------------------------------------+
type
  PFeedDescription = ^TFeedDescription;
  TFeedDescription = record
    version               : integer;     // data source version
    name                  : TStr128;     // data source name
    copyright             : TStr128;     // copyright string
    web                   : TStr128;     // data source web
    email                 : TStr128;     // data source email
    server                : TStr128;     // feeder server
    username              : TStr32;      // default feeder name
    userpass              : TStr32;      // default feeder password
    modes                 : integer;     // feeder modes (enum FeederModes)
    description           : TStr512;     // feeder description
    reserved              : array [0..61] of integer;   // reserved
  end;

const
//---- enum FeederModes
   modeOnlyQuotes    = 0; // only quotes feeder
   modeOnlyNews      = 1; // only news feeder
   modeQuotesAndNews = 2; // quotes and news feeder
   modeQuotesOrNews  = 3; // quotes or news feeder

type
//---- server datafeed
  PServerFeed = ^TServerFeed;
  TServerFeed = record
    filename  : TStr256;          // feeder file name
    feed      : TFeedDescription; // feeder description
  end;

  PAServerFeed = ^TAServerFeed;
  TAServerFeed = array [0..0] of TServerFeed;

//+------------------------------------------------------------------+
//|                           Charts                                 |
//+------------------------------------------------------------------+
//| Request chart history struct                                     |
//+------------------------------------------------------------------+
type
  PChartInfo = ^TChartInfo;
  TChartInfo = record
    symbol   : TStr12;  // symbol
    period   : integer; // period (PERIOD_*)
    start    : time_t;  // start of chart block
    tend     : time_t;  // end of chart block
    timesign : time_t;  // timestamp of existing chart base
    mode     : integer; // request mode
  end;

const
//---- chart period
   PERIOD_M1        = 1;
   PERIOD_M5        = 5;
   PERIOD_M15       = 15;
   PERIOD_M30       = 30;
   PERIOD_H1        = 60;
   PERIOD_H4        = 240;
   PERIOD_D1        = 1440;
   PERIOD_W1        = 10080;
   PERIOD_MN1       = 43200;
//---- request mode
   CHART_RANGE_IN   = 0;
   CHART_RANGE_OUT  = 1;
   CHART_RANGE_LAST = 2;

//+------------------------------------------------------------------+
//| Rate the in chart base                                           |
//+------------------------------------------------------------------+
type
  PRateInfoOld = ^TRateInfoOld;
  TRateInfoOld = packed record
    ctm                   : time_t;         // rate time
    open                  : integer;        // open price: 11987=119.87
    high,low,close        : smallint;       // high,low,close shift from open
    vol                   : double;         // volume
  end;

  PARateInfoOld = ^TARateInfoOld;
  TARateInfoOld = array [0..0] of TRateInfoOld;

type
  PRateInfo = ^TRateInfo;
  TRateInfo = packed record
    ctm                   : time_t;         // rate time
    open                  : integer;        // open price: 11987=119.87
    high,low,close        : integer;        // high,low,close shift from open
    vol                   : double;         // volume
  end;

  PARateInfo = ^TARateInfo;
  TARateInfo = array [0..0] of TRateInfo;

//+------------------------------------------------------------------+
//| Tick record in base                                              |
//+------------------------------------------------------------------+
type
  PTickRecord = ^TTickRecord;
  TTickRecord = packed record
    ctm      : time_t;                // tick time
    bid      : double;                // bid
    ask      : double;                // ask
    datafeed : integer;               // index if datafeed
    flags    : char;                  // TICK_FLAG_* flags
  end;

  PATickRecord = ^TATickRecord;
  TATickRecord = array [0..0] of TTickRecord;

//----
const 
  TICK_FLAG_RAW   =1; 
  TICK_FLAG_NORMAL=2;
  TICK_FLAG_ALL   =3;

//+------------------------------------------------------------------+
//| Tick request                                                     |
//+------------------------------------------------------------------+
type 
  PTickRequest = ^TTickRequest;
  TTickRequest = packed record
    symbol : TStr12;                  // symbol
    from   : time_t; 	              // start of period
    fromto : time_t;                  // end of period
    flags  : char;                    // TICK_FLAG_* flags
  end;

//+------------------------------------------------------------------+
//| Performance information                                          |
//+------------------------------------------------------------------+
type
  PPerformanceInfo = ^TPerformanceInfo;
  TPerformanceInfo = packed record
    ctm                   : time_t;
    users                 : smallint;       // online users
    cpu                   : smallint;       // processor loading (%)
    freemem               : integer;        // free memory (Kb)
    network               : integer;        // network activity (Kb/s)
    reserv                : integer;        // reserved
  end;

  PAPerformanceInfo = ^TAPerformanceInfo;
  TAPerformanceInfo = array [0..0] of TPerformanceInfo;

//+------------------------------------------------------------------+
//| Backup file information                                          |
//+------------------------------------------------------------------+
type
  PBackupInfo = ^TBackupInfo;
  TBackupInfo = record
    filename              : TStr256;  // file name
    size                  : integer;  // file size
    time                  : time_t;   // file time
    reserved              : array [0..5] of integer; // reserved
  end;

  PABackupInfo = ^TABackupInfo;
  TABackupInfo = array [0..0] of TBackupInfo;

//---- backup mode
const
   BACKUPS_ALL        = 0;    // all backup
   BACKUPS_PERIODICAL = 1;    // periodical backups
   BACKUPS_STARTUP    = 2;    // backups on startup
   BACKUPS_DELETE     = 3;    // backups on delete
   
//+------------------------------------------------------------------+
//|                        Databases                                 |
//+------------------------------------------------------------------+
//| User Record                                                      |
//+------------------------------------------------------------------+
   PUBLIC_KEY_SIZE    = 272;       // RSA key size // (((1024+64)/32)*4*2)
   USER_COLOR_NONE    = $FF000000;

type
  PUserRecord = ^TUserRecord;
  TUserRecord = record
    //---- general properties
    login                 : integer; // numeric account login
    group                 : TStr16;  // user group
    password              : TStr16;  // password hash
    //---- rights
    enable                : integer; // enable account?
    enable_change_password: integer; // enable to change password?
    enable_read_only      : integer; // enable to open trades?
    enable_reserved       : array [0..2] of integer;// reserverd
    //---- other properties
    password_investor     : TStr16;  // investor password hash
    password_phone        : TStr32;  // phone password
    name                  : TStr128; // client name
    country               : TStr32;  // country
    city                  : TStr32;  // city
    state                 : TStr32;  // state
    zipcode               : TStr16;  // zip code
    address               : TStr128; // address
    phone                 : TStr32;  // phone number
    email                 : TStr48;  // e-mail
    comment               : TStr64;  // comment
    id                    : TStr32;  // social nuber (IRD)
    status                : TStr16;  // resident status
    regdate               : time_t;  // registration date
    lastdate              : time_t;  // last authorization time
    //---- trade properties
    leverage              : integer; // leverage (forex)
    agent_account         : integer; // agent account
    reserved              : array [0..1] of integer;
    //---- trade data
    balance               : double;  // balance
    prevmonthbalance      : double;  // balance on previous month
    prevbalance           : double;  // balance of previous day
    credit                : double;  // credit
    interestrate          : double;  // cumulative interest
    taxes                 : double;  // taxes
    reserved2             : array [0..3] of double; // reserved
    //---- дополнительные поля
    publickey             : array [0..PUBLIC_KEY_SIZE-1] of char; // public key
    send_reports          : integer;  // send reports?
    balance_status        : integer;  // internal usage
    user_color            : COLORREF; // user color
    //----
    unused                : array [0..39] of char; // for future use
    api_data              : array [0..15] of char; // for API usage
  end;

  PAUserRecord = ^TAUserRecord;
  TAUserRecord = array [0..0] of TUserRecord;
  
//+------------------------------------------------------------------+
//| Users group operation                                            |
//+------------------------------------------------------------------+
type
  PGroupCommandInfo = ^TGroupCommandInfo;
  TGroupCommandInfo = packed record
    len      : integer;  // length of users list
    command  : char;     // group coommand
    newgroup : TStr16;   // new group
    leverage : integer;  // new leverage
    reserved : array [0..7] of integer; // reserved
  end;

//---- group commands
const
   GROUP_DELETE   = 0;
   GROUP_ENABLE   = 1;
   GROUP_DISABLE  = 2;
   GROUP_LEVERAGE = 3;
   GROUP_SETGROUP = 4;

//+------------------------------------------------------------------+
//| Online user description                                          |
//+------------------------------------------------------------------+
type
  POnlineRecord = ^TOnlineRecord;
  TOnlineRecord = record
    counter  : integer; // connections counter
    reserved : integer; // reserved
    login    : integer; // user login
    ip       : uint;    // connection ip address
    group    : TStr16;  // user group
  end;

  PAOnlineRecord = ^TAOnlineRecord;
  TAOnlineRecord = array [0..0] of TOnlineRecord;

//+------------------------------------------------------------------+
//| Trade Record                                                     |
//+------------------------------------------------------------------+
type
  PTradeRecord = ^TTradeRecord;
  TTradeRecord = packed record
    order                 : integer;                // order number
    login                 : integer;                // account login
    symbol                : TStr12;                 // symbol
    digits                : integer;                // symbol digits
    cmd                   : integer;                // trade comand
    volume                : integer;                // trade volume
    //----
    open_time             : time_t;                 // trade open time
    open_reserv           : integer;                // reserved
    open_price            : double;                 // trade open price
    sl,tp                 : double;                 // StopLoss,TakeProfit
    close_time            : time_t;                 // trade close time
    value_date            : time_t;                 // value date
    expiration            : time_t;                 // pending order expiration date
    conv_reserv           : integer;                // reserved
    conv_rates            : array [0..1] of double; // convertation rates
    //----
    commission            : double;                 // commission
    commission_agent      : double;                 // agent commission
    storage               : double;                 // swap
    close_price           : double;                 // trade close price
    profit                : double;                 // trade profit
    taxes                 : double;                 // taxes
    //---- client data
    magic                 : integer;                // unique magic number
    //---- comment
    comment               : TStr32;                 // comment
    internal_id           : integer;                // (internal usage)
    activation            : integer;                // activation type
    margin_reserved       : integer;                // reserved
    margin_rate           : double;                 // margin convertation rate (rate of convertation from margin currency to deposit one)
    reserved              : array [0..4] of integer; // reserved
    next                  : PTradeRecord;           // (internal usage)
  end;

  PATradeRecord = ^TATradeRecord;
  TATradeRecord = array [0..0] of TTradeRecord;

const
//---- trade commands
   OP_BUY                     = 0;
   OP_SELL                    = 1;
   OP_BUY_LIMIT               = 2;
   OP_SELL_LIMIT              = 3;
   OP_BUY_STOP                = 4;
   OP_SELL_STOP               = 5;
   OP_BALANCE                 = 6;
   OP_CREDIT                  = 7;

//---- activation types
//---- *_ROLLBACK = current price roll back from activation price level
   //---- no activation
   ACTIVATION_NONE            = 0;
   //---- stoploss, takeprofit, pendings
   ACTIVATION_SL              = 1;
   ACTIVATION_TP              = 2;
   ACTIVATION_PENDING         = 3;
   //---- stopout
   ACTIVATION_STOPOUT         = 4;
   //---- rollbacks
   ACTIVATION_SL_ROLLBACK     = -ACTIVATION_SL;
   ACTIVATION_TP_ROLLBACK     = -ACTIVATION_TP;
   ACTIVATION_PENDING_ROLLBACK= -ACTIVATION_PENDING;

//+------------------------------------------------------------------+
//| TradeRecord restoring from backup result                         |
//+------------------------------------------------------------------+
type
  PTradeRestoreResult = ^TTradeRestoreResult;
  TTradeRestoreResult = packed record
    order : integer;    // order
    res   : uchar;      // RET_OK_NONE     -order restored
                        // RET_INVALID_DATA-existent order restored
                        // RET_ERROR       -restoring disabled
  end;

  PATradeRestoreResult = ^TATradeRestoreResult;
  TATradeRestoreResult = array [0..0] of TTradeRestoreResult;

//+------------------------------------------------------------------+
//| Trade transaction                                                |
//+------------------------------------------------------------------+
type
  PTradeTransInfo = ^TTradeTransInfo;
  TTradeTransInfo = packed record
    trtype        : uchar;    // trade transaction type
    reserved      : char;     // reserved
    cmd           : smallint; // trade command
    order         : integer;
    orderby       : integer;  // order, order by
    symbol        : TStr12;   // trade symbol
    volume        : integer;  // trade volume
    price         : double;   // trade price
    sl            : double;
    tp            : double;   // stoploss, takeprofit
    ie_deviation  : integer;  // deviation on IE
    comment       : TStr32;   // comment
    expiration    : time_t;   // pending order expiration time
    crc           : integer;  // crc
  end;

//---- trade transaction types
const
   //----
   TT_PRICES_GET         = 0;           // prices requets
   TT_PRICES_REQUOTE     = 1;           // requote
   //---- client trade trabsaction
   TT_ORDER_IE_OPEN      = 64;          // open order (Instant Execution)
   TT_ORDER_REQ_OPEN     = 65;          // open order (Request Execution)
   TT_ORDER_MK_OPEN      = 66;          // open order (Market Execution)
   TT_ORDER_PENDING_OPEN = 67;          // open pending order
   //----
   TT_ORDER_IE_CLOSE     = 68;          // close order (Instant Execution)
   TT_ORDER_REQ_CLOSE    = 69;          // close order (Request Execution)
   TT_ORDER_MK_CLOSE     = 70;          // close order (Market Execution)
   //----
   TT_ORDER_MODIFY       = 71;          // modify pending order
   TT_ORDER_DELETE       = 72;          // delete pending order
   TT_ORDER_CLOSE_BY     = 73;          // close order by order
   TT_ORDER_CLOSE_ALL    = 74;          // close all orders by symbol
   //---- broker trade transactions
   TT_BR_ORDER_OPEN      = 75;          // open order
   TT_BR_ORDER_CLOSE     = 76;          // close order
   TT_BR_ORDER_DELETE    = 77;          // delete order (ANY OPEN ORDER!!!)
   TT_BR_ORDER_CLOSE_BY  = 78;          // close order by order
   TT_BR_ORDER_CLOSE_ALL = 79;          // close all orders by symbol
   TT_BR_ORDER_MODIFY    = 80;          // modify open price, stoploss, takeprofit etc. of order
   TT_BR_ORDER_ACTIVATE  = 81;          // activate pending order
   TT_BR_ORDER_COMMENT   = 82;          // modify comment of order
   TT_BR_BALANCE         = 83;          // balance / credit

//+------------------------------------------------------------------+
//| Margin level of the user                                         |
//+------------------------------------------------------------------+
type
  PMarginLevel = ^TMarginLevel;
  TMarginLevel = record
    login                 : integer;               // user login
    group                 : TStr16;                // user group
    leverage              : integer;               // user leverage
    updated               : integer;               // (internal)
    balance               : double;                // balance + credit
    equity                : double;                // equity
    volume                : integer;               // (internal)
    margin                : double;                // margin requirements
    margin_free           : double;                // free margin
    margin_level          : double;                // margin level
    margin_type           : integer;               // margin controlling type (percent/currency)
    level_type            : integer;               // level type (ok/margincall/stopout)
  end;

  PAMarginLevel = ^TAMarginLevel;
  TAMarginLevel = array [0..0] of TMarginLevel;
  
//---- margin level type
const
  MARGINLEVEL_OK         = 0;
  MARGINLEVEL_MARGINCALL = 1;
  MARGINLEVEL_STOPOUT    = 2;

//+------------------------------------------------------------------+
//| Trade request                                                    |
//+------------------------------------------------------------------+
type
  PRequestInfo = ^TRequestInfo;
  TRequestInfo = record
    //---- general props
    id                    : integer; // request id
    status                : char;    // request status
    time                  : dword;   // request time
    manager               : integer; // manager processing request (if any)
    //---- user info
    login                 : integer; // user login
    group                 : TStr16;  // user group
    balance               : double;  // user balance
    credit                : double;  // user credit
    //---- processing trade transaction
    prices                : array [0..1] of double;// bid/ask
    trade                 : TTradeTransInfo;       // trade transaction
    trade_group           : pointer;               // (internal use)
    reserved              : array [0..1] of integer;
    //----
    prev,next             : PRequestInfo;          // (internal use)
  end;

  PARequestInfo = ^TARequestInfo;
  TARequestInfo = array [0..0] of TRequestInfo;
  
//---- trade request status
const
   DC_EMPTY    = 0;
   DC_REQUEST  = 1;
   DC_LOCKED   = 2;
   DC_ANSWERED = 3;
   DC_RESETED  = 4;
   DC_CANCELED = 5;

//+------------------------------------------------------------------+
//| Daily report                                                     |
//+------------------------------------------------------------------+
type
  PDailyReport = ^TDailyReport;
  TDailyReport = record
    login                 : integer; // login
    ctm                   : time_t;  // time
    group                 : TStr16;  // group
    bank                  : TStr64;  // bank
    balance_prev          : double;  // previous balance
    balance               : double;  // balance
    deposit               : double;  // deposit
    credit                : double;  // credit
    profit_closed         : double;  // closed profit/loss
    profit                : double;  // floating profit/loss
    equity                : double;  // equity
    margin                : double;  // used margin
    margin_free           : double;  // free margin
    //----
    next                  : integer; // (internal)
    reserved              : array [0..2] of integer;
  end;

  PADailyReport = ^TADailyReport;
  TADailyReport = array [0..0] of TDailyReport;

//+------------------------------------------------------------------+
//| Reports request                                                  |
//+------------------------------------------------------------------+
type
  PReportGroupRequest = ^TReportGroupRequest;
  TReportGroupRequest = packed record
    name                  : TStr32;  // request group name
    from                  : time_t;  // from
    fromto                : time_t;  // to
    total                 : integer; // total logins in request group
  end;

//+------------------------------------------------------------------+
//| Daily reports request                                            |
//+------------------------------------------------------------------+
type
  PDailyGroupRequest = ^TDailyGroupRequest;
  TDailyGroupRequest = record
    name                  : TStr32;  // group name
    from                  : time_t;  // from
    fromto                : time_t;  // to
    total                 : integer; // total logins in request group
    reserved              : integer; // reserved
  end;

//+------------------------------------------------------------------+
//| Selected symbol information                                      |
//+------------------------------------------------------------------+
type
  PSymbolInfo = ^TSymbolInfo;
  TSymbolInfo = record
    symbol                : TStr12;  // symbol name
    digits                : integer; // floating point digits
    count                 : integer; // symbol counter
    visible               : integer; // visibility
    //---- данные для перерасчёта спреда
    stype                 : integer; // symbol type (symbols group index)
    point                 : double;  // symbol point=1/pow(10,digits)
    spread                : integer; // symbol spread
    spread_balance        : integer; // spread balance
    //----
    direction             : integer; // direction
    updateflag            : integer; // update flag
    lasttime              : time_t;  // last tick time
    bid,ask               : double;  // bid, ask
    high,low              : double;  // high, low
    commission            : double;  // commission
    comm_type             : integer; // commission type
  end;

  PASymbolInfo = ^TASymbolInfo;
  TASymbolInfo = array [0..0] of TSymbolInfo;

const
//---- symbol price direction
   SDIR_UP   = 0;
   SDIR_DOWN = 1;
   SDIR_NONE = 2;

//+------------------------------------------------------------------+
//| Symbol summary                                                   |
//+------------------------------------------------------------------+
type
  PSymbolSummary = ^TSymbolSummary;
  TSymbolSummary = record
    symbol                : TStr12;         // symbol
    count                 : integer;        // symbol counter
    digits                : integer;        // floating point digits
    stype                 : integer;        // symbol type (symbol group index)
    //---- clients summary
    orders                : integer;        // number of client orders
    buylots               : int64;          // buy volume
    selllots              : int64;          // sell volume
    buyprice              : double;         // average buy price
    sellprice             : double;         // average sell price
    profit                : double;         // clients profit
    //---- coverage summary
    covorders             : integer;        // number of coverage orders
    covbuylots            : int64;          // buy volume
    covselllots           : int64;          // sell volume
    covbuyprice           : double;         // average buy price
    covsellprice          : double;         // average sell price
    covprofit             : double;         // coverage profit
  end;

  PASymbolSummary = ^TASymbolSummary;
  TASymbolSummary = array [0..0] of TSymbolSummary;

//+------------------------------------------------------------------+
//| Currence exposure                                                |
//+------------------------------------------------------------------+
type
  PExposureValue = ^TExposureValue;
  TExposureValue = record
    currency              : TStr04;         // currency
    clients               : double;         // clients volume
    coverage              : double;         // coverage volume
  end;

  PAExposureValue = ^TAExposureValue;
  TAExposureValue = array [0..0] of TExposureValue;

//+------------------------------------------------------------------+
//| Symbol properties                                                |
//+------------------------------------------------------------------+
type
  PSymbolProperties = ^TSymbolProperties;
  TSymbolProperties = packed record
    symbol                : TStr12;    // symbol
    color                 : COLORREF;  // symbol color
    spread                : integer;   // symbol spread
    spread_balance        : integer;   // spread balance
    stops_level           : integer;   // stops level
    exemode               : integer;   // execution mode
  end;

//+------------------------------------------------------------------+
//| Symbol tick                                                      |
//+------------------------------------------------------------------+
type
  PTickInfo = ^TTickInfo;
  TTickInfo = packed record
    symbol                : TStr12;    // symbol
    time                  : time_t;    // receive time
    bid,ask               : double;
  end;

  PATickInfo  = ^TATickInfo;
  TATickInfo = array [0..0] of TTickInfo;

//+------------------------------------------------------------------+
//| Mail                                                             |
//+------------------------------------------------------------------+
type
  PMailBox = ^TMailBox;
  TMailBox = record
    time       : time_t;    // receive time
    sender     : integer;   // mail sender (login)
    from       : TStr64;    // mail sender (name)
    fromto     : integer;   // mail recipient
    subject    : TStr128;   // mail sumbect
    readed     : integer;   // readed flag
    body       : PChar;     // pointer to mail body
    bodylen    : integer;   // mail body length
    reserved   : array [0..1] of integer;  // reserved
  end;

  PAMailBox = ^TAMailBox;
  TAMailBox = array [0..0] of TMailBox;

//+------------------------------------------------------------------+
//| News topic                                                       |
//+------------------------------------------------------------------+
type
  PNewsTopic = ^TNewsTopic;
  TNewsTopic = record
    key        : ulong;    // news key
    time       : time_t;   // news time
    ctm        : TStr32;   // news source time ("yyyy/mm/dd hh:mm:ss")
    topic      : TStr256;  // news topic
    category   : TStr64;   // news category
    keywords   : TStr256;  // news keywords
    body       : PChar;    // body (if present)
    bodylen    : integer;  // body length
    readed     : integer;  // readed flag
    priority   : integer;  // news priority: 0-general, 1-high
    reserved   : array [0..1] of integer;  // reserved
  end;

  PANewsTopic = ^TANewsTopic;
  TANewsTopic = array [0..0] of TNewsTopic;

//+------------------------------------------------------------------+
//| Server journal record                                            |
//+------------------------------------------------------------------+
type
  PServerLog = ^TServerLog;
  TServerLog = record
    code     : integer; // code
    time     : TStr20;  // time
    ip       : TStr20;  // ip
    msg      : TStr512; // message
  end;

  PAServerLog = ^TAServerLog;
  TAServerLog = array [0..0] of TServerLog; 

const
//---- log record codes
   CmdOK                   = 0;      // OK
   CmdTrade                = 1;      // trades only
   CmdLogin                = 2;      // logins only
   CmdWarn                 = 3;      // warnings
   CmdErr                  = 4;      // errors
   CmdAtt                  = 5;      // attention, important errors
//---- request logs type
   LOG_TYPE_STANDARD       = 0;      // all except logins
   LOG_TYPE_LOGINS         = 1;      // logins only
   LOG_TYPE_TRADES         = 2;      // trades only
   LOG_TYPE_ERRORS         = 3;      // errors
   LOG_TYPE_FULL           = 4;      // full log
//+------------------------------------------------------------------+
//| Pumping notification codes                                       |
//+------------------------------------------------------------------+
   PUMP_START_PUMPING      = 0;      // pumping started
   PUMP_UPDATE_SYMBOLS     = 1;      // update symbols
   PUMP_UPDATE_GROUPS      = 2;      // update groups
   PUMP_UPDATE_USERS       = 3;      // update users
   PUMP_UPDATE_ONLINE      = 4;      // update online users
   PUMP_UPDATE_BIDASK      = 5;      // update bid/ask
   PUMP_UPDATE_NEWS        = 6;      // update news
   PUMP_UPDATE_NEWS_BODY   = 7;      // update news body
   PUMP_UPDATE_MAIL        = 8;      // update news
   PUMP_UPDATE_TRADES      = 9;      // update trades
   PUMP_UPDATE_REQUESTS    = 10;     // update trade requests
   PUMP_UPDATE_PLUGINS     = 11;     // update server plugins
   PUMP_UPDATE_ACTIVATION  = 12;     // new order for activation (sl/sp/stopout)
   PUMP_UPDATE_MARGINCALL  = 13;     // new margin calls
   PUMP_STOP_PUMPING       = 14;     // pumping stopped
//+------------------------------------------------------------------+
//| Dealing notification codes                                       |
//+------------------------------------------------------------------+
   DEAL_START_DEALING      = 0;      // dealing dispatcher started
   DEAL_REQUEST_NEW        = 1;      // new request
   DEAL_STOP_DEALING       = 2;      // dealing dispatcher stopped

//+------------------------------------------------------------------+
//| Notification callback function                                   |
//+------------------------------------------------------------------+
type
  MTAPI_NOTIFY_FUNC = procedure(code:integer); cdecl;
//+------------------------------------------------------------------+
//| MetaTrader Manager Interface                                     |
//+------------------------------------------------------------------+
type
  IManagerInterface = interface
//---- service methods
   procedure MemFree(Ptr: pointer); stdcall;
   function  ErrorDescription(errcode: integer): PChar; stdcall;
   procedure WorkingDirectory(Path: PChar); stdcall;

//---- connection
   function Connect(Server: PChar): integer; stdcall;
   function Disconnect: integer; stdcall;
   function IsConnected: integer; stdcall;
   function Login(Login: integer; Password: PChar): integer; stdcall;
   function LoginSecured(KeyPath: PChar): integer; stdcall;
   function KeysSend(KeyPath: PChar): integer; stdcall;
   function Ping: integer; stdcall;
   function PasswordChange(Password: PChar; IsInvestor: integer): integer; stdcall;
   function ManagerRights(man: PConManager): integer; stdcall;     //todo: ???

//---- server administration commands
   function SrvRestart: integer; stdcall;
   function SrvChartsSync: integer; stdcall;
   function SrvLiveUpdateStart: integer; stdcall;
   function SrvFeedsRestart: integer; stdcall;

//---- server configuration
   //----  request
   function CfgRequestCommon(out Config: TConCommon): integer; stdcall;
   function CfgRequestTime(out Config: TConTime): integer; stdcall;
   function CfgRequestBackup(out Config: TConBackup): integer; stdcall;
   function CfgRequestSymbolGroup(out Config: TAConSymbolGroup): integer; stdcall;
   function CfgRequestAccess(out Total: integer): PAConAccess; stdcall;
   function CfgRequestDataServer(out Total: integer): PAConDataServer; stdcall;
   function CfgRequestHoliday(out Total: integer): PAConHoliday; stdcall;
   function CfgRequestSymbol(out Total: integer): PAConSymbol; stdcall;
   function CfgRequestGroup(out Total: integer): PAConGroup; stdcall;
   function CfgRequestManager(out Total: integer): PAConManager; stdcall;
   function CfgRequestFeeder(out Total: integer): PAConFeeder; stdcall;
   function CfgRequestLiveUpdate(out Total: integer): PAConLiveUpdate; stdcall;
   function CfgRequestSync(out Total: integer): PAConSync; stdcall;
   function CfgRequestPlugin(out Total: integer): PAConPluginParam; stdcall;
   //----  update
   function CfgUpdateCommon(const Config: TConCommon): integer; stdcall;
   function CfgUpdateAccess(const Config: TConAccess; Idx: integer): integer; stdcall;
   function CfgUpdateDataServer(const Config: TConDataServer; Idx: integer): integer; stdcall;
   function CfgUpdateTime(const Config: TConTime): integer; stdcall;
   function CfgUpdateHoliday(const Config: TConHoliday; Idx: integer): integer; stdcall;
   function CfgUpdateSymbol(const Config: TConSymbol): integer; stdcall;
   function CfgUpdateSymbolGroup(const Config: TConSymbolGroup; Idx:integer): integer; stdcall;
   function CfgUpdateGroup(const Config: TConGroup): integer; stdcall;
   function CfgUpdateManager(const Config: TConManager): integer; stdcall;
   function CfgUpdateFeeder(const Config: TConFeeder): integer; stdcall;
   function CfgUpdateBackup(const Config: TConBackup): integer; stdcall;
   function CfgUpdateLiveUpdate(const Config: TConLiveUpdate): integer; stdcall;
   function CfgUpdateSync(const Config: TConSync): integer; stdcall;
   function CfgUpdatePlugin(const Config: TConPlugin;
     const ParUpd: TAPluginCfg; Total: integer): integer; stdcall;
   //----  delete
   function CfgDeleteAccess(Idx: integer): integer; stdcall;
   function CfgDeleteDataServer(Idx: integer): integer; stdcall;
   function CfgDeleteHoliday(Idx: integer): integer; stdcall;
   function CfgDeleteSymbol(Idx: integer): integer; stdcall;
   function CfgDeleteGroup(Idx: integer): integer; stdcall;
   function CfgDeleteManager(Idx: integer): integer; stdcall;
   function CfgDeleteFeeder(Idx: integer): integer; stdcall;
   function CfgDeleteLiveUpdate(Idx: integer): integer; stdcall;
   function CfgDeleteSync(Idx: integer): integer; stdcall;
   //----  shift
   function CfgShiftAccess(Idx: integer; Shift: integer): integer; stdcall;
   function CfgShiftDataServer(Idx: integer; Shift: integer): integer; stdcall;
   function CfgShiftHoliday(Idx: integer; Shift: integer): integer; stdcall;
   function CfgShiftSymbol(Idx: integer; Shift: integer): integer; stdcall;
   function CfgShiftGroup(Idx: integer; Shift: integer): integer; stdcall;
   function CfgShiftManager(Idx: integer; Shift: integer): integer; stdcall;
   function CfgShiftFeeder(Idx: integer; Shift: integer): integer; stdcall;
   function CfgShiftLiveUpdate(Idx: integer; Shift: integer): integer; stdcall;
   function CfgShiftSync(Idx: integer; Shift: integer): integer; stdcall;
   function CfgShiftPlugin(Idx: integer; Shift: integer): integer; stdcall;
   
//---- server feeders
   function SrvFeeders(out Total: integer): PAServerFeed; stdcall;
   function SrvFeederLog(Name: PChar; Len: integer): PChar; stdcall;
//---- chart bases
   function ChartRequestObsolete(const Chart: TChartInfo; TimeSign: ptime_t; out Total: integer): PARateInfoOld; stdcall;
   function ChartAddObsolete(Symbol: PChar; const Period: integer; const Rates: TARateInfoOld; var Count: integer): integer; stdcall; // todo: check Count (was the pointer
   function ChartUpdateObsolete(Symbol: PChar; const Period: integer; const Rates: TARateInfoOld; var Count: integer): integer; stdcall; // todo: look above
   function ChartDeleteObsolete(Symbol: PChar; const Period: integer; const Rates: TARateInfoOld; var Count: integer): integer; stdcall;
//---- performance info
   function PerformaneRequest(From: time_t; out Total: integer): PAPerformanceInfo; stdcall;
//---- users/trades backups
   function BackupInfoUsers(Mode: integer; var Total: integer): PABackupInfo; stdcall;
   function BackupInfoOrders(Mode: integer; var Total: integer): PABackupInfo; stdcall;
   function BackupRequestUsers(FileName: PChar; Request: PChar; var Total: integer): PAUserRecord; stdcall;
   function BackupRequestOrders(FileName: PChar; Request: PChar; var Total: integer): PATradeRecord; stdcall;
   function BackupRestoreUsers(const Users: TAUserRecord; Total: integer): integer; stdcall;
   function BackupRestoreOrders(const Trades: TATradeRecord; Total: integer): PATradeRestoreResult; stdcall;
//---- administrator databases commands
   function AdmUsersRequest(Group: PChar; out Total: integer): PAUserRecord; stdcall;
   function AdmTradesRequest(Group: PChar; OpenOnly: integer; out Total: integer): PATradeRecord; stdcall;
   function AdmBalanceCheck(const Logins: TIntArray; Total: integer): integer; stdcall;
   function AdmBalanceFix(const Logins: TIntArray; Total: integer): integer; stdcall;
   function AdmTradesDelete(const Orders: TIntArray; Total: integer): integer; stdcall;
   function AdmTradeRecordModify(const Trade: PTradeRecord): integer; stdcall;
//---- symbols
   function SymbolsRefresh: integer; stdcall;
   function SymbolsGetAll(out Total: integer): PAConSymbol; stdcall;
   function SymbolGet(Symbol: PChar; out CS: TConSymbol): integer; stdcall;
   function SymbolInfoGet(Symbol: PChar; out SI: TSymbolInfo): integer; stdcall;
   function SymbolAdd(Symbol: PChar): integer; stdcall;
   function SymbolHide(Symbol: PChar): integer; stdcall;
   function SymbolChange(const Prop: TSymbolProperties): integer; stdcall;
   function SymbolSendTick(Symbol: PChar; const Bid, Ask: double): integer; stdcall;
//---- manager commands
   function GroupsRequest(out Total: integer): PAConGroup; stdcall;
   function MailSend(const Mail: TMailBox; const Logins: TIntArray): integer; stdcall;
   function NewsSend(const News: TNewsTopic): integer; stdcall; 
//---- journal
   function JournalRequest(Mode: integer;
     From, Upto: time_t; Filter: PChar; out Total: integer): PAServerLog; stdcall;
//---- databases: direct request to the server
   function UsersRequest(out Total: integer): PAUserRecord; stdcall;
   function UserRecordsRequest(const Logins: TIntArray; out Total: integer): PAUserRecord; stdcall;
   function UserRecordNew(const User: TUserRecord): integer; stdcall;
   function UserRecordUpdate(const User: TUserRecord): integer; stdcall;
   function UsersGroupOp(const Info: TGroupCommandInfo;
     const Logins: TIntArray): integer; stdcall;
   function UserPasswordCheck(Login: integer; Password: PChar): integer; stdcall;
   function UserPasswordSet(Login: integer;
     Password: PChar; IsInvestor, ClearPubkey: integer): integer; stdcall;
   function OnlineRequest(out Total: integer): PAOnlineRecord; stdcall;
//---- orders
   function TradeTransaction(const Info: TTradeTransInfo): integer; stdcall;
   function TradesRequest(out Total: integer): PATradeRecord; stdcall;
   function TradeRecordsRequest(const Orders: TIntArray; Total: pinteger): PATradeRecord; stdcall;
   function TradesUserHistory(Login: integer;
     From, Upto: time_t; out Total: integer): PATradeRecord; stdcall;
   function TradeCheckStops(const Trade: TTradeTransInfo; Price: double): integer; stdcall;
//---- reports
   function ReportsRequest(const Request: TReportGroupRequest;
     const Logins: TIntArray; Total: pinteger): PATradeRecord; stdcall;
   function DailyReportsRequest(const Request: TDailyGroupRequest;
     const Logins: TIntArray; Total:pinteger): PADailyReport; stdcall;
//---- external command
   function ExternalCommand(Data_in: PChar; Size_in: integer;
     Data_out: ppchar; Size_out: pinteger): integer; stdcall;
//---- plugins
   function PluginUpdate(const Plugin: TConPluginParam): integer; stdcall;
//---- pumping
   function PumpingSwitch(Callback: MTAPI_NOTIFY_FUNC;
     TargetW: HWND; EventMsg: uint; Flags: integer): integer; stdcall;
   function GroupsGet(out Total: integer): PAConGroup; stdcall;
   function GroupRecordGet(Name: PChar; var Group: TConGroup): integer; stdcall;
   function SymbolInfoUpdated(PSI: PASymbolInfo; MaxInfo: integer): integer; stdcall;
   function UsersGet(out Total: integer): PAUserRecord; stdcall;
   function UserRecordGet(Login: integer; var User: TUserRecord): integer; stdcall;
   function OnlineGet(out Total: integer): PAOnlineRecord; stdcall;
   function OnlineRecordGet(Login: integer; var User: TOnlineRecord): integer; stdcall;
   function TradesGet(out Total: integer): PATradeRecord; stdcall;
   function TradesGetBySymbol(Symbol: PChar; out Total: integer): PATradeRecord; stdcall;
   function TradesGetByLogin(Login: integer; Group: PChar; out Total: integer): PATradeRecord; stdcall;
   function TradesGetByMarket(out Total: integer): PATradeRecord; stdcall;
   function TradeRecordGet(Order: integer; var Trade: TTradeRecord): integer; stdcall;
   function TradeClearRollback(Order: integer): integer; stdcall;
   function MarginsGet(out Total: integer): PAMarginLevel; stdcall;
   function MarginLevelGet(Login: integer; Group: PChar; var Margin: TMarginLevel): integer; stdcall;
   function RequestsGet(out Total: integer): PARequestInfo; stdcall;
   function RequestInfoGet(Pos: integer; var Info: TRequestInfo): integer; stdcall;
   function PluginsGet(out Total: integer): PAConPlugin; stdcall;
   function PluginParamGet(Pos:integer; var Plugin: TConPluginParam): integer; stdcall;
   function MailLast(Path: PChar; Length: pinteger): integer; stdcall;
   function NewsGet(out Total: integer): PANewsTopic; stdcall;
   function NewsTotal: integer; stdcall;
   function NewsTopicGet(Pos: integer; var News: TNewsTopic): integer; stdcall;
   procedure NewsBodyRequest(Key: integer); stdcall;
   function NewsBodyGet(Key: integer): PChar; stdcall;
//---- dealing
   function DealerSwitch(Callback: MTAPI_NOTIFY_FUNC;
     const TargetW: HWND; EventMsg: uint): integer; stdcall;
   function DealerRequestGet(var Info: TRequestInfo): integer; stdcall;
   function DealerSend(const Info: TRequestInfo; correct_prices: integer): integer; stdcall;
   function DealerReject(id: integer): integer; stdcall;
   function DealerReset (id: integer): integer; stdcall;
//----
   function TickInfoLast(Symbol: PChar; out Total: integer): PATickInfo; stdcall;
   function SymbolsGroupsGet(out Config: TAConSymbolGroup): integer; stdcall;
   function ServerTime(): time_t; stdcall;
   function MailsRequest(out Total: integer): PAMailBox; stdcall;
//---- risk management
   function SummaryGetAll(out Total: integer): PASymbolSummary; stdcall;
   function SummaryGet(Symbol: PChar; var info: TSymbolSummary): integer; stdcall;
   function SummaryGetByCount(Symbol: integer; var info: TSymbolSummary): integer; stdcall;
   function SummaryGetByType(SecType: integer; var info: TSymbolSummary): integer; stdcall;
   function SummaryCurrency(Cur: PChar; MaxChars: integer): integer; stdcall;
   function ExposureGet(out Total: integer): PAExposureValue; stdcall;
   function ExposureValueGet(Cur: PChar; var info: TExposureValue): integer; stdcall;
//----
   function MarginLevelRequest(Login: integer; var Level: TMarginLevel): integer; stdcall;
   function HistoryCorrect(Symbol: PChar; out Updated: integer): integer;stdcall;
//---- new chart bases
   function ChartRequest(const Chart: TChartInfo; TimeSign: ptime_t;out Total: integer): PARateInfo; stdcall;
   function ChartAdd(Symbol: PChar;const Period: integer;const Rates: TARateInfo;var Count: integer): integer; stdcall;
   function ChartUpdate(Symbol: PChar;const Period: integer;const Rates: TARateInfo;var Count: integer): integer; stdcall;
   function ChartDelete(Symbol: PChar;const Period: integer;const Rates: TARateInfo;var Count: integer): integer; stdcall;
//---- ticks base
   function TicksRequest(const Request: TTickRequest;out Total: integer): PATickRecord; stdcall;
end;

//+------------------------------------------------------------------+
//| Functions                                                        |
//+------------------------------------------------------------------+
type
  TMTManGetVersion   = function: integer; cdecl;
  TMTManGetInterface = function(
    Version: integer; var Obj: IManagerInterface): integer; cdecl;

function CTime2DateTime(T: time_c): TDateTime;
function DateTime2CTime(T: TDateTime): time_c;

//+------------------------------------------------------------------+
//| Factory Wrapper                                                  |
//+------------------------------------------------------------------+
const
  DLL_MTMANAPI = 'mtmanapi.dll';
  FNC_GETVERSN = 'MtManVersion';
  FNC_GETINTFC = 'MtManCreate';

type
  // Main Manager Prototype for inheritance. Look mtmanapiu.pas for example
  TCustomManager = class(TObject)
  private
    FLib:       HMODULE;
  protected
    FAPI:       IManagerInterface; // use only successor inside, not published!
  public
    constructor Create(dll: string = DLL_MTMANAPI);
    destructor  Destroy; override;
  end;

type
  TManagerFactory = class
  private
    FLib:          HMODULE;
    FGetVersion:   TMTManGetVersion;
    FGetInterface: TMTManGetInterface;
  public
    constructor Create(dll: string = DLL_MTMANAPI);
    destructor  Destroy; override;
    function    CreateAPI: IManagerInterface;
  end;

implementation

{ TCustomManager }

{$C+}
constructor TCustomManager.Create(dll: string);
var
  GetVersion: TMTManGetVersion; GetInterface: TMTManGetInterface;
begin
  inherited Create;

  FLib := LoadLibrary(PChar(dll));
  Win32Check(FLib <> 0);

  @GetVersion   := GetProcAddress(FLib, PChar(FNC_GETVERSN));
  @GetInterface := GetProcAddress(FLib, PChar(FNC_GETINTFC));

  if (@GetVersion <> nil) and (@GetInterface <> nil) then
    GetInterface(GetVersion, FAPI)
  else
    FAPI := nil;

  if FAPI = nil then begin
    FreeLibrary(FLib);
    Assert(False, Self.ClassName + ' create failed');
  end;
end;

destructor TCustomManager.Destroy;
begin
  if FAPI <> nil then begin
    if FAPI.IsConnected <> 0 then FAPI.Disconnect; FAPI := nil;
  end;
  if FLib <> 0 then FreeLibrary(FLib);
  inherited;
end;

{ TManagerFactory }

constructor TManagerFactory.Create(dll: string);
begin
  inherited Create;

  FLib := LoadLibrary(PChar(dll));
  Win32Check(FLib <> 0);

  @FGetVersion   := GetProcAddress(FLib, PChar(FNC_GETVERSN));
  @FGetInterface := GetProcAddress(FLib, PChar(FNC_GETINTFC));
end;

destructor TManagerFactory.Destroy;
begin
  if FLib <> 0 then FreeLibrary(FLib);
  inherited;
end;

function TManagerFactory.CreateAPI():IManagerInterface;
begin
  if (@FGetVersion <> nil) and (@FGetInterface <> nil) then
    FGetInterface(FGetVersion, Result)
  else
    Result := nil;
end;

{ date utils }

// C-time is number of seconds since the beginning of January 1, 1970

function CTime2DateTime(T: time_c): TDateTime;
begin
  Result := EncodeDate(1970, 1, 1) + (T / 86400.0);
end;

function DateTime2CTime(T: TDateTime): time_c;
begin
  Result := Trunc((T - EncodeDate(1970, 1, 1)) * 86400.0);
end;

function WinsockStartup: integer;
var WSA: TWSAData;
begin
   Result := WSAStartup($0201, WSA);
end;

initialization
  WinsockStartup;

finalization
  WSACleanup;

end.

